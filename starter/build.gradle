plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.stefanodallapalma'
version = '0.0.1'

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'auth-spring-boot-starter'

            pom {
                name = 'Auth Spring Boot Starter'
                description = 'A Spring Boot starter for authentication with JSON Web Tokens and Refresh Tokens'
                url = 'https://github.com/stefanodallapalma/auth-spring-boot'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'stefanodallapalma'
                        name = 'Stefano Dalla Palma'
                        email = 'stefano.dallapalma0@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/stefanodallapalma/auth-spring-boot.git'
                    developerConnection = 'scm:git:ssh://git@github.com:stefanodallapalma/auth-spring-boot.git'
                    url = 'https://github.com/stefanodallapalma/auth-spring-boot'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'MavenCentral'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'

            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

jar {
    archiveBaseName = 'auth-spring-boot-starter'
    archiveVersion = '0.0.1'
    archiveClassifier = ''
    from(project(':web').sourceSets.main.output)
    from(project(':core').sourceSets.main.output)
}